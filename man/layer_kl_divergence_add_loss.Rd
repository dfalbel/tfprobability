% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distribution-layers.R
\name{layer_kl_divergence_add_loss}
\alias{layer_kl_divergence_add_loss}
\title{Pass-through layer that adds a KL divergence penalty to the model loss}
\usage{
layer_kl_divergence_add_loss(object, distribution, use_exact_kl = FALSE,
  test_points_reduce_axis = NULL,
  test_points_fn = tf$convert_to_tensor, weight = NULL,
  input_shape = NULL, batch_input_shape = NULL, batch_size = NULL,
  dtype = NULL, name = NULL, trainable = NULL, weights = NULL)
}
\arguments{
\item{object}{Model or layer object}

\item{distribution}{Distribution instance corresponding to b as in  \code{KL[a, b]}.
The previous layer's output is presumed to be a Distribution instance and is a.}

\item{use_exact_kl}{Logical indicating if KL divergence should be
calculated exactly via \code{tfp$distributions$kl_divergence} or via Monte Carlo approximation.
Default value: FALSE.}

\item{test_points_reduce_axis}{Integer vector or scalar representing dimensions
over which to reduce_mean while calculating the Monte Carlo approximation of the KL divergence.
As is with all tf$reduce_* ops, NULL means reduce over all dimensions;
() means reduce over none of them. Default value: () (i.e., no reduction).}

\item{test_points_fn}{A callable taking a \code{tfp$distributions$Distribution} instance and returning a tensor
used for random test points to approximate the KL divergence.
Default value: tf$convert_to_tensor.}

\item{weight}{Multiplier applied to the calculated KL divergence for each Keras batch member.
Default value: NULL (i.e., do not weight each batch member).}

\item{input_shape}{Dimensionality of the input (integer) not including the
samples axis. This argument is required when using this layer as the first
layer in a model.}

\item{batch_input_shape}{Shapes, including the batch size. For instance,
\code{batch_input_shape=c(10, 32)} indicates that the expected input will be
batches of 10 32-dimensional vectors. \code{batch_input_shape=list(NULL, 32)}
indicates batches of an arbitrary number of 32-dimensional vectors.}

\item{batch_size}{Fixed batch size for layer}

\item{dtype}{The data type expected by the input, as a string (\code{float32},
\code{float64}, \code{int32}...)}

\item{name}{An optional name string for the layer. Should be unique in a
model (do not reuse the same name twice). It will be autogenerated if it
isn't provided.}

\item{trainable}{Whether the layer weights will be updated during training.}

\item{weights}{Initial weights for layer.}
}
\value{
a Keras layer that adds a KL divergence penalty to the model loss
}
\description{
Pass-through layer that adds a KL divergence penalty to the model loss
}
\seealso{
Other Probabilistic layers (require TensorFlow probability): \code{\link{layer_multivariate_normal_tri_l}}

Other distribution_layers: \code{\link{layer_distribution_lambda}},
  \code{\link{layer_independent_bernoulli}},
  \code{\link{layer_multivariate_normal_tri_l}}
}
\concept{Probabilistic layers (require TensorFlow probability)}
\concept{distribution_layers}
