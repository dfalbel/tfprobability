% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distribution-layers.R
\name{layer_kl_divergence_add_loss}
\alias{layer_kl_divergence_add_loss}
\title{Pass-through layer that adds a KL divergence penalty to the model loss}
\usage{
layer_kl_divergence_add_loss(object, distribution, use_exact_kl = NULL,
  test_points_reduce_axis = NULL, test_points_fn = NULL,
  weight = NULL, input_shape = NULL, batch_input_shape = NULL,
  batch_size = NULL, dtype = NULL, name = NULL, trainable = NULL,
  weights = NULL)
}
\arguments{
\item{distribution}{Distribution instance corresponding to `b` as in  `KL[a, b]`.
The previous layer's output is presumed to be a `Distribution` instance and is `a`.}

\item{use_exact_kl}{Logical indicating if KL divergence should be
calculated exactly via `tfp$distributions$kl_divergence` or via Monte Carlo approximation.
Default value: `FALSE`.}

\item{test_points_reduce_axis}{Integer vector or scalar representing dimensions
over which to `reduce_mean` while calculating the Monte Carlo approximation of the KL divergence.
As is with all `tf$reduce_*` ops, NULL means reduce over all dimensions;
`()` means reduce over none of them. Default value: `()` (i.e., no reduction).}

\item{test_points_fn}{A callable taking a `tfp$distribution` instance and returning a tensor
used for random test points to approximate the KL divergence.
Default value: `tf$convert_to_tensor`.}

\item{weight}{Multiplier applied to the calculated KL divergence for each Keras batch member.
Default value: NULL (i.e., do not weight each batch member).}
}
\value{
a Keras layer that adds a KL divergence penalty to the model loss
}
\description{
Pass-through layer that adds a KL divergence penalty to the model loss
}
\seealso{
Other Probabilistic layers (require TensorFlow probability): \code{\link{layer_independent_bernoulli}},
  \code{\link{layer_multivariate_normal_tril}}
}
\concept{Probabilistic layers (require TensorFlow probability)}
